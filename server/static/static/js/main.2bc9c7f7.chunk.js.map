{"version":3,"sources":["components/Header.jsx","components/Loading.jsx","components/Project.jsx","components/Environment.jsx","App.js","serviceWorker.js","index.js","config.js"],"names":["appName","className","Types","type","Math","floor","random","length","color","height","width","Project","props","componentDidMount","state","data","loading","console","log","this","name","branch","path","Loading","alt","src","React","Component","domain","projects","href","map","project","index","key","App","config","environments","totalEnv","Header","style","justifyContent","env","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","build","repo","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yQAEe,G,MAAA,YAAkB,IAAfA,EAAc,EAAdA,QAChB,OACE,yBAAKC,UAAU,cACb,yBAAKA,UAAU,sBACb,0CACA,0BAAMA,UAAU,oBAAhB,eAA6CD,O,mDCLxCE,EAAQ,CACnB,QACA,OACA,UACA,QACA,QACA,OACA,kBACA,UAOa,sBACbC,YADa,MAHND,EAAME,KAAKC,MAAMD,KAAKE,SAAWJ,EAAMK,SAGjC,MAEbC,aAFa,MAEL,UAFK,MAGbC,cAHa,MAGJ,GAHI,MAIbC,aAJa,MAIL,GAJK,SAKT,kBAAC,IAAD,CAAcP,KAAMA,EAAMK,MAAOA,EAAOC,OAAQA,EAAQC,MAAOA,KClBhDC,G,wDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAKRC,kBAAoB,aAJlB,EAAKC,MAAL,eAAkBF,EAAMG,KAAxB,CAA8BC,SAAS,IACvCC,QAAQC,IAAI,OAAQ,EAAKJ,OAHR,E,qDAUT,IAAD,EACiCK,KAAKL,MAArCM,EADD,EACCA,KAAYC,GADb,EACOC,KADP,EACaD,QAAQL,EADrB,EACqBA,QAC5B,OACE,yBAAKf,UAAU,WACb,yBAAKA,UAAU,gBAAgBmB,GAE9BJ,GAAW,kBAACO,EAAD,OACVP,GACA,yBAAKf,UAAU,gBACb,yBACEuB,IAAI,cACJd,MAAM,KACNe,IAAI,gFAEN,0BAAMxB,UAAU,uBAAuBoB,S,GAzBdK,IAAMC,YCC5B,G,MAAA,YAAe,IAAZZ,EAAW,EAAXA,KACRK,EAA2BL,EAA3BK,KAAMQ,EAAqBb,EAArBa,OAAQC,EAAad,EAAbc,SAEtB,OACE,yBAAK5B,UAAU,qBACb,yBAAKA,UAAU,YACb,uBAAGA,UAAU,WAAW6B,KAAI,YAAOF,IAChCR,EADH,YAIDS,EAASE,KAAI,SAACC,EAASC,GACtB,OAAO,kBAAC,EAAD,CAASlB,KAAMiB,EAASE,IAAKD,U,MCU7BE,MArBf,YAA0B,IAAXC,EAAU,EAAVA,OACLhB,EAAuBgB,EAAvBhB,KAAMiB,EAAiBD,EAAjBC,aACRC,EAAWD,GAAgBA,EAAa9B,OAE9C,OACE,yBAAKN,UAAU,OACb,kBAACsC,EAAD,CAAQvC,QAASoB,IACjB,yBACEnB,UAAU,cACVuC,MAAO,CACLC,eAAgBH,EAAW,EAAI,gBAAkB,iBAGlDD,EAAaN,KAAI,SAACW,EAAKT,GACtB,OAAO,kBAAC,EAAD,CAAalB,KAAM2B,EAAKR,IAAKD,UCP1BU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAKd,OCTM,CACbhB,KAAM,cACNiB,aAAc,CACZ,CACEjB,KAAM,YACNQ,OAAQ,oCACRC,SAAU,CACR,CACET,KAAM,SACNE,KAAM,oCACN6B,MAAO,aACPC,KAAM,0CAER,CACEhC,KAAM,eACNE,KAAM,0CACN8B,KAAM,gDAER,CACEhC,KAAM,eACNE,KAAM,0CACN8B,KAAM,+CACND,MAAO,gBAIb,CACE/B,KAAM,YACNQ,OAAQ,oCACRC,SAAU,CACR,CACET,KAAM,SACNE,KAAM,oCACN6B,MAAO,cAET,CACE/B,KAAM,eACNE,KAAM,kDD1Bd+B,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.2bc9c7f7.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default ({ appName }) => {\n  return (\n    <div className=\"App_Header\">\n      <div className=\"App_MainDecoration\">\n        <span>git-info</span>\n        <span className=\"App_UserBranding\">&nbsp; â€” {appName}</span>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport ReactLoading from \"react-loading\";\nexport const Types = [\n  \"balls\",\n  \"bars\",\n  \"bubbles\",\n  \"cubes\",\n  \"cylon\",\n  \"spin\",\n  \"spinningBubbles\",\n  \"spokes\"\n];\n\nconst randomLoadingType = () => {\n  return Types[Math.floor(Math.random() * Types.length)];\n};\n\nexport default ({\n  type = randomLoadingType(),\n  color = \"#283e56\",\n  height = 50,\n  width = 50\n}) => <ReactLoading type={type} color={color} height={height} width={width} />;\n","import React from \"react\";\nimport Loading from \"./Loading\";\nimport \"./Project.css\";\n\nexport default class Project extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.data, loading: true };\n    console.log(\"data\", this.state);\n  }\n\n  componentDidMount = () => {\n    // fetch project info here\n  };\n\n  render() {\n    const { name, path, branch, loading } = this.state;\n    return (\n      <div className=\"Project\">\n        <div className=\"Project_Name\">{name}</div>\n\n        {loading && <Loading></Loading>}\n        {!loading && (\n          <div className=\"Project_Info\">\n            <img\n              alt=\"github logo\"\n              width=\"20\"\n              src=\"https://upload.wikimedia.org/wikipedia/commons/e/ed/Octicons-git-branch.svg\"\n            />\n            <span className=\"Project_Branch_Name\">{branch}</span>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport Project from \"./Project\";\n\nimport \"./Environment.css\";\n\nexport default ({ data }) => {\n  const { name, domain, projects } = data;\n\n  return (\n    <div className=\"Env_MainContainer\">\n      <div className=\"Env_Name\">\n        <a className=\"Env_Link\" href={`//${domain}`}>\n          {name} &rarr;\n        </a>\n      </div>\n      {projects.map((project, index) => {\n        return <Project data={project} key={index}></Project>;\n      })}\n    </div>\n  );\n};\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport Environment from \"./components/Environment\";\nimport \"./App.css\";\n\nfunction App({ config }) {\n  const { name, environments } = config;\n  const totalEnv = environments && environments.length;\n\n  return (\n    <div className=\"App\">\n      <Header appName={name}></Header>\n      <div\n        className=\"Env_Listing\"\n        style={{\n          justifyContent: totalEnv < 2 ? \"space-between\" : \"space-around\"\n        }}\n      >\n        {environments.map((env, index) => {\n          return <Environment data={env} key={index}></Environment>;\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport config from \"./config\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App config={config} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export default {\n  name: \"AmbitionBox\",\n  environments: [\n    {\n      name: \"Staging 1\",\n      domain: \"staging1.ambitionbox.infoedge.com\",\n      projects: [\n        {\n          name: \"server\",\n          path: \"/Users/abhisheksoni/github/server\",\n          build: \"yarn build\",\n          repo: \"https://github.com/subramanya92/server\"\n        },\n        {\n          name: \"ambox_server\",\n          path: \"/Users/abhisheksoni/github/ambox_server\",\n          repo: \"https://github.com/subramanya92/ambox_server\"\n        },\n        {\n          name: \"ambox_client\",\n          path: \"/Users/abhisheksoni/github/ambox_client\",\n          repo: \"https://github.com/subramanya92/ambox_client\",\n          build: \"yarn build\"\n        }\n      ]\n    },\n    {\n      name: \"Staging 2\",\n      domain: \"staging1.ambitionbox.infoedge.com\",\n      projects: [\n        {\n          name: \"server\",\n          path: \"/Users/abhisheksoni/github/server\",\n          build: \"yarn build\"\n        },\n        {\n          name: \"ambox_server\",\n          path: \"/Users/abhisheksoni/github/ambox_server\"\n        }\n      ]\n    }\n  ]\n};\n"],"sourceRoot":""}